<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wim.Module.MailTemplate</name>
    </assembly>
    <members>
        <member name="T:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder">
            <summary>
            DefaultValuePlaceholder data entity
            </summary>
        </member>
        <member name="T:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder.DefaultValuePlaceholderMap">
            <summary>
            Sushi.MicroORM Mapper class
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder.DefaultValuePlaceholderMap.#ctor">
            <summary>
            Sushi.MicroORM Mapper ctor
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder.ID">
            <summary>
            ID of the current default value
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder.MailTemplateID">
            <summary>
            GUID  of the current default value
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder.Placeholder">
            <summary>
            Placeholder of the current default value
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder.Value">
            <summary>
            Value of the current default value
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder.FetchAll">
            <summary>
            Fetch all default values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder.FetchSingle(System.Int32)">
            <summary>
            Fetch one default value by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder.Save">
            <summary>
            Saves the current default value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder.Delete">
            <summary>
            Deletes the current default value
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder.FetchAllByMailTemplate(System.Int32)">
            <summary>
            Fetch all default values by mail template GUID
            </summary>
            <param name="mailTemplateID"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.DefaultValuePlaceholder.FetchAllByMailTemplateAsync(System.Int32)">
            <summary>
            Fetch all default values by mail template GUID
            </summary>
            <param name="mailTemplateID"></param>
            <returns></returns>
        </member>
        <member name="T:Wim.Module.MailTemplate.Data.MailTemplate">
            <summary>
            MailTemplate data entity
            </summary>
        </member>
        <member name="T:Wim.Module.MailTemplate.Data.MailTemplate.MailTemplateMap">
            <summary>
            Sushi.MicroORM Mapper class
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.MailTemplate.MailTemplateMap.#ctor">
            <summary>
            Sushi.MicroORM Mapper ctor
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.ID">
            <summary>
            The ID of the current mail template
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.Name">
            <summary>
            The name of the current mail template, which does not have to unique.
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.Description">
            <summary>
            The description of the current mail template.
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.Identifier">
            <summary>
            The identifier of the current mail template, which is unique.
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.DefaultSenderEmail">
            <summary>
            The e-mail address of the sender of the e-mail
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.DefaultSenderName">
            <summary>
            The name of the sender of the e-mail
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.BCCReceivers">
            <summary>
            The bcc receivers, as ";"-separated list, like info@supershift.com;support@supershift.nl
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.Subject">
            <summary>
            The e-mail subject
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.Body">
            <summary>
            The e-mail body
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.DateCreated">
            <summary>
            The date of creation of the current mail template.
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.DateLastUpdated">
            <summary>
            The date of the last modification of the current mail template.
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.IsArchived">
            <summary>
            Returns if the current mail template is archived.
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.IsPublished">
            <summary>
            Returns if the current mail template is published.
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.VersionMajor">
            <summary>
            The major version like 2.x
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.VersionMinor">
            <summary>
            The minor verion like x.1
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.UserID">
            <summary>
            The UserID of the creator
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.UserName">
            <summary>
            The Username of the creator
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.GUID">
            <summary>
            The GUID of the current mail template
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.HasPublishedVersion">
            <summary>
            HasPublishedVersion property is true if the mail template has at least one major version
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.MailTemplate.FetchAll">
            <summary>
            Fetch all mail templates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.MailTemplate.FetchSingle(System.Int32)">
            <summary>
            Fetch a single mail template by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.MailTemplate.FetchAllByIdentifiers(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Retrieves all MailTemplates that matches the specified identifiers
            </summary>
            <param name="identifiers">Collection of identifiers</param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.MailTemplate.Save(System.Int32,System.String,System.String)">
            <summary>
            Saves the current mail template to the database with checks on the validity of placeholders in the body and subject.
            </summary>
            <param name="userID"></param>
            <param name="userDisplayname"></param>
            <param name="userEmail"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.MailTemplate.Revert(System.Int32,System.String,System.String)">
            <summary>
            Revert the current mail template to the previous major version.
            </summary>
            <param name="userID"></param>
            <param name="userDisplayname"></param>
            <param name="userEmail"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.MailTemplate.Publish(System.Int32,System.String,System.String)">
            <summary>
            Publishes the current mail template by making it a major version.
            </summary>
            <param name="userID"></param>
            <param name="userDisplayname"></param>
            <param name="userEmail"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.MailTemplate.Delete(System.Collections.Generic.List{System.Int32})">
            <summary>
            Deletes mail templates that are identified by their id.
            </summary>
            <param name="mailTemplateIDs"></param>
            <returns></returns>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.PlaceholderList">
            <summary>
            Add placeholders to this list, like template.PlaceholderList.Add("HOTEL", "Sunny Beach Hotel");
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplate.PlaceholderGroupList">
            <summary>
            Add placeholder groups to this list, like template.PlaceholderGroupList.Add("rooms");
            template.PlaceholderGroupList.AddNewRow();
            template.PlaceholderGroupList.AddNewRowItem("NAME", "Cus Tomer");
            </summary>
        </member>
        <member name="F:Wim.Module.MailTemplate.Data.MailTemplate.OptionalSections">
            <summary>
            Optional sections are useful for instance to create invitation mail templates with optional blocks for rooms, sunbeds and express checkins. 
            Leaving a section out has as result that the section is removed from the e-mail.
            </summary>
        </member>
        <member name="T:Wim.Module.MailTemplate.Data.PlaceholderGroupList">
            <summary>
            PlaceholderGroupList class, with methods to add items
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.PlaceholderGroupList.Add(System.String)">
            <summary>
            Add a group to the placeholder groups, like template.PlaceholderGroupList.Add("rooms");
            </summary>
            <param name="groupName"></param>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.PlaceholderGroupList.AddNewRow">
            <summary>
            Add a new row to the placeholder group, so it can hold items, like template.PlaceholderGroupList.AddNewRow();
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.PlaceholderGroupList.AddNewRowItem(System.String,System.String)">
            <summary>
            Add a new item to the row of a placeholder group, like template.PlaceholderGroupList.AddNewRowItem("NAME", "Cus Tomer");
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:Wim.Module.MailTemplate.Data.PlaceholderList">
            <summary>
            PlaceholderList class
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.PlaceholderList.Add(System.String,System.String)">
            <summary>
            Add name-value pairs to the placeholder list, like template.PlaceholderList.Add("NAME", "Cus Tomer");
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:Wim.Module.MailTemplate.Data.MailTemplateList">
            <summary>
            MailTemplate view data entity
            </summary>
        </member>
        <member name="T:Wim.Module.MailTemplate.Data.MailTemplateList.MailTemplateListMap">
            <summary>
            Sushi.MicroORM Mapper class
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.MailTemplateList.MailTemplateListMap.#ctor">
            <summary>
            Sushi.MicroORM Mapper ctor
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplateList.seqnum">
            <summary>
            Sequence number in the view
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.MailTemplateList.FetchAll(System.String)">
            <summary>
            Fetch all mail templates
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.MailTemplateList.FetchSingleByIdentifier(System.String)">
            <summary>
            Fetch one mail template by identifier
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Data.MailTemplateList.FetchSingle(System.Int32)">
            <summary>
            Fetch one mail template by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Wim.Module.MailTemplate.Data.MailTemplateList._IsSelected">
            <summary>
            Internal property for Mediakiwi to see if the record is selected
            </summary>
        </member>
        <member name="T:Wim.Module.MailTemplate.Entities.Placeholder">
            <summary>
            Placeholder class
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Entities.Placeholder.#ctor">
            <summary>
            Placeholder ctor
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Entities.Placeholder.#ctor(System.String,System.String)">
            <summary>
            Placeholder ctor
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:Wim.Module.MailTemplate.Entities.Placeholder.Name">
            <summary>
            The name of the placeholder, always in uppercase
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Entities.Placeholder.Value">
            <summary>
            The value of the placeholder
            </summary>
        </member>
        <member name="T:Wim.Module.MailTemplate.Entities.PlaceholderGroup">
            <summary>
            PlaceholderGroup class
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Entities.PlaceholderGroup.#ctor">
            <summary>
            PlaceholderGroup ctor
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Entities.PlaceholderGroup.#ctor(System.String)">
            <summary>
            PlaceholderGroup ctor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Wim.Module.MailTemplate.Entities.PlaceholderGroup.Name">
            <summary>
            The name of the placeholder group
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Entities.PlaceholderGroup.AddNewRow">
            <summary>
            Adds a new row to the placeholder group
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Entities.PlaceholderGroup.AddNewRowItem(System.String,System.String)">
            <summary>
            Adds a new item to the placeholder group row
            </summary>
            <param name="placeholder"></param>
            <param name="value"></param>
        </member>
        <member name="P:Wim.Module.MailTemplate.Entities.PlaceholderGroup.PlaceholderRows">
            <summary>
            List of placeholder rows
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Entities.PlaceholderGroup.PlaceholderTags">
            <summary>
            List of placeholder tags
            </summary>
        </member>
        <member name="T:Wim.Module.MailTemplate.Entities.PlaceholderRow">
            <summary>
            Placeholder row, used in placeholder groups
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Entities.PlaceholderRow.Placeholders">
            <summary>
            List of placeholders in this placeholder row
            </summary>
        </member>
        <member name="T:Wim.Module.MailTemplate.Logic.Helper">
            <summary>
            Helper class to work with mail templates
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Logic.Helper.IsValid(System.String,System.IO.TextWriter)">
            <summary>
            Validates a string with placeholder tags
            </summary>
            <param name="textWithPlaceholderTags"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Wim.Module.MailTemplate.Logic.PlaceholderLogic">
            <summary>
            PlaceholderLogic class with logic for placeholders
            </summary>
        </member>
        <member name="F:Wim.Module.MailTemplate.Logic.PlaceholderLogic.Pattern">
            <summary>
            Pattern searches for [, then a character in A-Z or 0-9, ending with ] 
            Matches [T], [TEST123]
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Logic.PlaceholderLogic.ApplyPlaceholders(System.String,System.Collections.Generic.List{Wim.Module.MailTemplate.Entities.PlaceholderGroup},System.Collections.Generic.List{Wim.Module.MailTemplate.Entities.Placeholder},System.Collections.Generic.List{System.String},System.IO.TextWriter)">
            <summary>
            Provide a mail template ID, placeholder group replacements, placeholder replacements and optional sections to include
            </summary>
            <param name="mailTemplateIdentifier"></param>
            <param name="placeholderGroupReplacements"></param>
            <param name="placeholderReplacements"></param>
            <param name="optionalSectionsReplacements"></param>
            <param name="logger"></param>
            <returns>MailTemplate with Body and Subject replaced</returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Logic.PlaceholderLogic.ApplyPlaceholders(Wim.Module.MailTemplate.Data.MailTemplate,System.Collections.Generic.List{Wim.Module.MailTemplate.Entities.PlaceholderGroup},System.Collections.Generic.List{Wim.Module.MailTemplate.Entities.Placeholder},System.Collections.Generic.List{System.String},System.IO.TextWriter)">
            <summary>
            Provide a mail template object, placeholder group replacements, placeholder replacements and optional sections to include
            </summary>
            <param name="mailTemplate"></param>
            <param name="placeholderGroupReplacements"></param>
            <param name="placeholderReplacements"></param>
            <param name="optionalSectionsToInclude"></param>
            <param name="logger"></param>
            <returns>MailTemplate with Body and Subject replaced</returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Logic.PlaceholderLogic.ApplyPlaceholdersAsync(Wim.Module.MailTemplate.Data.MailTemplate,System.Collections.Generic.List{Wim.Module.MailTemplate.Entities.PlaceholderGroup},System.Collections.Generic.List{Wim.Module.MailTemplate.Entities.Placeholder},System.Collections.Generic.List{System.String},System.IO.TextWriter)">
            <summary>
            Provide a mail template object, placeholder group replacements, placeholder replacements and optional sections to include
            </summary>
            <param name="mailTemplate"></param>
            <param name="placeholderGroupReplacements"></param>
            <param name="placeholderReplacements"></param>
            <param name="optionalSectionsToInclude"></param>
            <param name="logger"></param>
            <returns>MailTemplate with Body and Subject replaced</returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Logic.PlaceholderLogic.GetSectionTags(System.String,System.Boolean,System.IO.TextWriter)">
            <summary>
            Get a list of all section tags and specify if the brackets are to be included
            </summary>
            <param name="textWithSectionTags"></param>
            <param name="mustStripBrackets"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Logic.PlaceholderLogic.GetPlaceholderTags(System.String,System.Boolean,System.IO.TextWriter)">
            <summary>
            Get a list of all placeholder tags and specify if the brackets are to be included
            </summary>
            <param name="textWithPlaceholderTags"></param>
            <param name="mustStripBrackets"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Logic.PlaceholderLogic.ApplyPlaceholders(System.String,System.IO.TextWriter,System.Collections.Generic.List{Wim.Module.MailTemplate.Entities.PlaceholderGroup},System.Collections.Generic.List{Wim.Module.MailTemplate.Entities.Placeholder},System.Collections.Generic.List{Wim.Module.MailTemplate.Data.DefaultValuePlaceholder},System.Collections.Generic.List{System.String})">
            <summary>
            Provide a mail template object, placeholder group replacements, placeholder replacements and optional sections to include.
            </summary>
            <param name="textWithPlaceholderTags"></param>
            <param name="placeholderGroupReplacements"></param>
            <param name="placeholderReplacements"></param>
            <param name="listOfDefaultValues"></param>
            <param name="optionalSectionsToInclude"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Logic.PlaceholderLogic.GetPlaceholderGroupsWithPlaceholders(System.String,System.Boolean,System.IO.TextWriter)">
            <summary>
            Returns a list of placeholder groups with placeholders
            </summary>
            <param name="textWithPlaceholderTags"></param>
            <param name="mustStripBrackets"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.Logic.PlaceholderLogic.GetPlaceholderGroups(System.String,System.IO.TextWriter)">
            <summary>
            Returns a list of placeholder groups, by name only
            </summary>
            <param name="textWithPlaceholderTags"></param>
            <returns></returns>
        </member>
        <member name="T:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventHandler">
            <summary>
            SendPreviewEmailEventHandler class, to handle preview e-mails. This needs implementation on the referencing project like 
            Wim.Module.MailTemplate.Logic.SendPreviewEmailEventHandler.SendPreviewEmail += OnSendPreviewEmail;
            </summary>
        </member>
        <member name="E:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventHandler.SendPreviewEmail">
            <summary>
            Sync version of the SendPreviewEmail method
            </summary>
        </member>
        <member name="E:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventHandler.SendPreviewEmailAsync">
            <summary>
            Async version of the SendPreviewEmailAsync method
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventHandler.OnSendPreviewEmail(Wim.Module.MailTemplate.Logic.SendPreviewEmailEventArgs)">
            <summary>
            Invokation of the handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventHandler.OnSendPreviewEmailAsync(Wim.Module.MailTemplate.Logic.SendPreviewEmailEventArgs)">
            <summary>
            Async invokation of the SendPreviewEmailAsync
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventArgs">
            <summary>
            SendPreviewEmailEventArgs class
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventArgs.EmailFrom">
            <summary>
            E-mail address to send from
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventArgs.EmailFromName">
            <summary>
            Name to send from
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventArgs.EmailTo">
            <summary>
            E-mail address to send to
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventArgs.Subject">
            <summary>
            Subject of the e-mail
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventArgs.Body">
            <summary>
            Body of the e-mail
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventArgs.TemplateName">
            <summary>
            Template name, as identifier
            </summary>
        </member>
        <member name="P:Wim.Module.MailTemplate.Logic.SendPreviewEmailEventArgs.IsSuccess">
            <summary>
            Shows if sending the preview was successful
            </summary>
        </member>
        <member name="T:Wim.Module.MailTemplate.MailTemplate">
            <summary>
            Use this class as helper to get mail templates and to apply placeholders
            </summary>
        </member>
        <member name="M:Wim.Module.MailTemplate.MailTemplate.Fetch(System.String)">
            <summary>
            Gets a mail template by identifier
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.MailTemplate.FetchAsync(System.String)">
            <summary>
            Gets a mail template by identifier
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.MailTemplate.ApplyPlaceholders(Wim.Module.MailTemplate.Data.MailTemplate,System.IO.TextWriter)">
            <summary>
            Applies the placeholders to the body and the subject properties
            </summary>
            <param name="mailTemplate"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:Wim.Module.MailTemplate.MailTemplate.ApplyPlaceholdersAsync(Wim.Module.MailTemplate.Data.MailTemplate,System.IO.TextWriter)">
            <summary>
            Applies the placeholders to the body and the subject properties
            </summary>
            <param name="mailTemplate"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
    </members>
</doc>
